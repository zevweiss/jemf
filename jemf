#!/usr/bin/python

#
# jemf: an encrypted mini-filesystem.
#
# (command-line password manager)
#
# Copyright (c) 2014, 2016, Zev Weiss <zev@bewilderbeest.net>
#

from __future__ import print_function

import sys
import argparse
from getpass import getpass as getpass_tty
import subprocess
import json
import os
import os.path
import errno
import random
import socket
import time
import signal
import curses
import tempfile
from cmd import Cmd as CommandInterpreter
import shlex
import types
import functools
import base64
import hashlib

try:
	import readline
	import string
	readline.set_completer_delims(string.whitespace + os.sep)
except ImportError:
	pass

default_fspaths = [os.path.expanduser(p) for p in ["~/.config/jemf", "~/.jemf"]]
gpgcmd = "gpg2"

debugmode = os.getenv("JEMF_DEBUG") is not None

# Python 2/3 compat stuff
if hasattr(os, "pipe2"):
	pipe = lambda: os.pipe2(0)
else:
	pipe = os.pipe

try:
	unicode
	strtypes = (str, unicode)
except NameError:
	strtypes = (str,)

class UserError(Exception):
	pass

class UsageError(UserError):
	pass

class InternalError(Exception):
	pass

class CorruptFS(Exception):
	pass

def errprint_tty(msg):
	if msg != '' and msg[-1] != '\n':
		msg += '\n'
	print(msg, end='', file=sys.stderr)

zenity_args = ["zenity", "--title", "jemf"]

def errprint_gui(msg):
	errprogs = [zenity_args + ["--error", "--text"], ["gxmessage"], ["xmessage"]]
	for ep in errprogs:
		try:
			subprocess.call(ep + [msg])
			return
		except:
			pass
	print("(None of %s succeeded)" % [ep[0] for ep in errprogs], file=sys.stderr)
	errprint_tty(msg)

def error(msg):
	raise UserError("Error: %s" % msg)

def internal_error(msg):
	raise InternalError("Internal error: %s" % msg)

def getpass_gui(prompt):
	progs = [["ssh-askpass"], ["gnome-ssh-askpass"],
		 zenity_args + ["--entry", "--hide-text", "--text"]]
	for p in progs:
		try:
			p = subprocess.Popen(p + [prompt], stdout=subprocess.PIPE)
		except OSError as ose:
			continue
		output = p.communicate()[0]
		if p.wait() == 0:
			assert output[-1] == '\n'
			return output[:-1]

	error("None of %s succeeded" % [p[0] for p in progs])

getpass = getpass_tty
errprint = errprint_tty

def confirmed_getpass(label):
	pass1 = getpass("Enter %s: " % label)
	pass2 = getpass("Confirm %s: " % label)
	if pass1 != pass2:
		error("input mismatch")
	else:
		return pass1

def find_fs():
	for p in default_fspaths:
		if os.path.exists(p):
			return p
	return None

class JemfJSONEncoder(json.JSONEncoder):
	def default(self, obj):
		if isinstance(obj, File):
			if obj.metadata is not None:
				return [obj.data, obj.metadata.to_json_obj()]
			else:
				return obj.data
		elif isinstance(obj, Directory):
			if obj.metadata is not None:
				return [obj.dentries, obj.metadata.to_json_obj()]
			else:
				return obj.dentries
		return json.JSONEncoder.default(self, obj)

def pretty_json_dump(d):
	return json.dumps(d, sort_keys=True, indent=4, separators=(',', ': '), cls=JemfJSONEncoder)

def check_tty_print_interlock(force):
	if not force and sys.stdout.isatty():
		error("won't print to terminal without '-f'")

def run_gpg(args, passwd, stdin_data=None):
	pw_r, pw_w = pipe()
	pw_w = os.fdopen(pw_w, "w")
	cmdargs = [gpgcmd, "--quiet", "--batch", "--passphrase-fd", str(pw_r)] + args

	try:
		# close write end of passphrase pipe in child process
		proc = subprocess.Popen(cmdargs, stdout=subprocess.PIPE, stdin=subprocess.PIPE,
					stderr=subprocess.PIPE, close_fds=False,
					preexec_fn=pw_w.close)
	except OSError as ose:
		if ose.errno == errno.ENOENT:
			raise UserError("Error attempting to execute %s: %s"
					% (gpgcmd, ose.strerror))
		else:
			raise

	# parent doesn't use read end
	os.close(pw_r)

	# send passphrase to gpg child
	pw_w.write(passwd)
	# probably redundant, since we're just about to close it, but why not...
	pw_w.flush()
	pw_w.close()

	stdout_data, stderr_data = proc.communicate(stdin_data)

	retval = proc.wait()
	if retval != 0:
		msg = stderr_data.decode("utf-8")
		# make a common message from gpg a bit more "user friendly"
		if "decryption failed: Bad session key" in msg:
			msg = "Error: incorrect password."
		errprint(msg)
		raise subprocess.CalledProcessError(retval, cmdargs)

	return stdout_data

hostname = None
def get_hostname():
	global hostname
	if hostname is None:
		hostname = socket.gethostbyaddr(socket.gethostname())[0]
	return hostname

def path_components(path):
	np = os.path.normpath(path)
	while len(np) > 0 and np[0] == os.sep:
		np = np[1:]
	return np.split(os.sep) if len(np) > 0 else []

default_constraints = "L12:C2:m2:N2:P2"

gen_constraints_desc = """
CONSTRAINTS is a colon-separated list of data constraints of the form TV.

T is a type indicator: L for length, C for capital letters, m for
lower-case letters, N for numerals (digits), and P for punctuation
characters.

V is the numeric value of of the constraint: for L (length) this
specifies the length of the generated data; for all others it provides
a minimum number of characters of that type, though as a special case
V=0 means the character type will be omitted.

The default constraint is %s, specifying a twelve-character
entry with at least two capital letters, at least two lower-case
letters, at least two digits, and at least two punctuation characters.
The user-provided constraint list (which may be empty) can selectively
override these constraints.

Stupid-site example: L8:C2:m2:N2:P0 for an 8-character purely
alphanumeric (but mixed-case) entry.""" % default_constraints

char_classes = {
	'C': "ABCDEFGHIJKLMNOPQRSTUVWXYZ", # uppercase
	'm': "abcdefghijklmnopqrstuvwxyz", # lowercase
	'N': "0123456789", # digits
	'P': "!@#$%^&*:._-=+", # punctuation
}

def constraints_to_dict(cstr):
	d = {}
	for c in cstr.split(":"):
		if c != "":
			if c[0] not in char_classes and c[0] != 'L':
				error("invalid constraint type: '%c'" % c[0])
			d[c[0]] = int(c[1:])
	return d

def generate_data(constraints):
	cdict = constraints_to_dict(default_constraints)
	cdict.update(constraints_to_dict(constraints))
	s, padchars = "", ""
	for c, chars in char_classes.items():
		for _ in range(0, cdict[c]):
			s += random.choice(chars)
		if cdict[c] > 0:
			padchars += chars

	# fill remaining space from pad character sets
	for _ in range(0, cdict['L']-len(s)):
		s += random.choice(padchars)

	l = list(s)
	random.shuffle(l)
	return ''.join(l[:cdict['L']])

def recursive_list(obj, pfx, fileonly=False):
	l = []
	if not fileonly or isfile(obj):
		l.append(pfx)
	if isdir(obj):
		for n, o in obj.items():
			l += recursive_list(o, os.path.join(pfx, n), fileonly=fileonly)
	return l

class Metadata(object):
	def __init__(self, mtime, mtzname, mhost):
		self.mtime = mtime
		self.mtzname = mtzname
		self.mhost = mhost

	@classmethod
	def herenow(cls):
		return cls(time.time(), time.tzname[time.daylight], get_hostname())

	@classmethod
	def from_json_obj(cls, d):
		if not (isinstance(d, dict)
		        and len(d) == 3
		        and all(k in d for k in ["mtime", "mtzname", "mhost"])
		        and isinstance(d["mtime"], float)
		        and all(isinstance(d[k], strtypes) for k in ["mtzname", "mhost"])):
			raise CorruptFS("Invalid metadata object")
		return cls(d["mtime"], d["mtzname"], d["mhost"])

	def to_json_obj(self):
		return dict(mtime=self.mtime, mtzname=self.mtzname, mhost=self.mhost)

class File(object):
	def __init__(self, data):
		self.data = data
		self.metadata = Metadata.herenow()

	@classmethod
	def from_json_obj(cls, o):
		if isinstance(o, strtypes):
			# bare file object, no metadata
			f = cls(o)
			f.metadata = None
			return f
		elif isinstance(o, list):
			# file object with metadata
			if len(o) != 2:
				raise CorruptFS("Invalid file object")
			f = File.from_json_obj(o[0])
			f.metadata = Metadata.from_json_obj(o[1])
			return f
		else:
			raise CorruptFS("Invalid file object")

class Directory(object):
	def __init__(self, parent):
		if parent is None:
			parent = self
		else:
			assert type(parent) is Directory
		self._specials = {os.path.curdir: self, os.path.pardir: parent}
		self.dentries = {}
		self.metadata = None

	@classmethod
	def from_json_obj(cls, o, parent=None):
		if isinstance(o, dict):
			# bare directory object, no metadata
			newdir = cls(parent)
			for name, obj in o.items():
				if (isinstance(obj, dict)
				    or (isinstance(obj, list) and isinstance(obj[0], dict))):
					obj = Directory.from_json_obj(obj, newdir)
				elif (isinstance(obj, strtypes)
				      or (isinstance(obj, list) and isinstance(obj[0], strtypes))):
					obj = File.from_json_obj(obj)
				else:
					raise CorruptFS("Invalid object")
				newdir[name] = obj

			# HACK: undo metadata updates done automatically while filling in dirents
			newdir.metadata = None
			return newdir
		elif isinstance(o, list):
			if len(o) != 2:
				raise CorruptFS("Invalid directory object")
			d = Directory.from_json_obj(o[0], parent)
			d.metadata = Metadata.from_json_obj(o[1])
			return d
		else:
			raise CorruptFS("Invalid directory object")

	def touch(self):
		self.metadata = Metadata.herenow()

	def __getitem__(self, k):
		if k in self._specials:
			return self._specials[k]
		else:
			return self.dentries.__getitem__(k)

	def __contains__(self, k):
		return k in self._specials or self.dentries.__contains__(k)

	def __setitem__(self, k, v):
		assert k not in self._specials
		self.touch()
		self.dentries.__setitem__(k, v)

	def __delitem__(self, k):
		assert k not in self._specials
		self.touch()
		self.dentries.__delitem__(k)

	def items(self):
		return self.dentries.items()

def isdir(obj):
	assert isinstance(obj, (File, Directory))
	return isinstance(obj, Directory)

def isfile(obj):
	assert isinstance(obj, (File, Directory))
	return isinstance(obj, File)

ansi_red = "\x1b[31m"
ansi_rst = "\x1b[m"

def clear_terminal():
	curses.setupterm()
	e3 = curses.tigetstr("E3")
	if e3:
		curses.putp(e3)
	curses.putp(curses.tigetstr("clear"))
	sys.stdout.flush()

class JemfShell(CommandInterpreter):

	# Time out after 2 minutes waiting for input (can be
	# overridden via JEMF_TMOUT environment variable)
	input_timeout = 120

	def __init__(self, jemf, args):
		self.fs = jemf
		self.args = args
		self.prompt = "%sjemf[%s]> %s" % (ansi_red, self.fs.filename if sys.stdin.isatty() else "", ansi_rst)
		tmout = os.getenv("JEMF_TMOUT")
		if tmout:
			try:
				self.input_timeout = int(tmout)
			except ValueError:
				errprint("JEMF_TMOUT value not a valid base-10 integer, retaining default (%d)"
					 % self.input_timeout)
		CommandInterpreter.__init__(self)

	def do_EOF(self, args):
		"""EOF (^D): exit shell session."""
		if sys.stdin.isatty():
			sys.stdout.write('\n')
		return True

	def set_input_timeout_alarm(self):
		if self.input_timeout <= 0:
			return
		def alrm_handler(signum, frame):
			clear_terminal()
			errprint("Input timeout exceeded; exiting.\n")
			sys.exit(1)
		signal.signal(signal.SIGALRM, alrm_handler)
		signal.alarm(self.input_timeout)

	def preloop(self):
		self.set_input_timeout_alarm()

	def postcmd(self, stop, line):
		if not stop:
			self.set_input_timeout_alarm()
		return stop

	# This is defined to override default "repeat previous
	# command" behavior on getting an empty line.
	def emptyline(self):
		return

	def default(self, line):
		errprint("Unrecognized command: %s\n(see 'help')" % line.split()[0])

	def completedefault(self, orig_text, line, beg, end):
		try:
			if shlex.split(line[:end] + ".")[-1] != ".":
				text = shlex.split(line[:end])[-1]
			else:
				text = orig_text
		except ValueError:
			text = orig_text
		ppath, pfx = os.path.split(text)

		pdir = self.fs.lookup_path(ppath, noexc=True)
		if pdir is None:
			return []

		base = orig_text[:-len(pfx)]
		l = []
		for name in pdir.dentries:
			if name.startswith(pfx):
				suffix = os.sep if isdir(pdir.dentries[name]) else " "
				l.append(base + name + suffix)

		return l

	@classmethod
	def _add_cmd_handler(cls, cmd):
		def cmdfun(self, argstr):
			try:
				args = cmd.parser.parse_args(shlex.split(argstr))
			except (ValueError, UsageError) as exc:
				if exc.args[0]:
					errprint(exc.args[0])
				return
			except HelpFlagPassed:
				return
			# merge in original self.args if not overridden
			for k,v in self.args.__dict__.items():
				if k not in args:
					setattr(args, k, v)
			try:
				cmd(self.fs, args)
			except UserError as ue:
				if ue.args[0]:
					errprint(ue.args[0])
		cmdfun.__doc__ = cmd.parser.format_help()
		setattr(cls, "do_%s" % cmd.name, cmdfun)


# For throwing when a -h/--help flag is passed, so that a caller N levels up can
# either skip executing the command (in shell mode) or just exit cleanly (in
# batch mode).
class HelpFlagPassed(Exception):
	pass

# Custom help action that doesn't unconditionally exit (which we don't want in
# shell mode).
class JemfHelpAction(argparse.Action):
	def __call__(self, parser, namespace, values, option_string=None):
		parser.print_help()
		raise HelpFlagPassed()

def mk_raise_usage_error(usage):
	usg = usage.strip()
	def func(msg):
		raise UsageError("%s\n%s" % (usg, msg.strip()))
	return func

def mk_path_arg(desc, opt=False, multiple_ok=False):
	d = dict(metavar="PATH", help=desc)
	if opt and multiple_ok:
		d["nargs"] = '*'
	elif multiple_ok:
		d["nargs"] = '+'
	elif opt:
		d["nargs"] = '?'
	return (("path%s" % ("s" if multiple_ok else ""),), d)

SOCKBUF_SIZE = 1024

class Jemf(object):
	def __init__(self, filename, password):
		self.filename = filename
		self.password = password
		self.pipe_to = None
		self.data = Directory(None)
		self.metadata = {}
		# to preserve any other stuff found in the file
		# (e.g. if it was last written out by a newer version)
		self.extra_sections = {}
		self.cwd = self.data
		self.socket = None
		self.shell_mode = False

	def _to_json(self):
		d = self.extra_sections.copy()
		d["data"] = self.data
		d["metadata"] = self.metadata
		return pretty_json_dump(d)

	def _from_json(self, s):
		jd = json.loads(s)
		self.metadata = jd.pop("metadata")
		self.data = Directory.from_json_obj(jd.pop("data"))
		self.extra_sections = jd
		self.cwd = self.data

	@classmethod
	def load_from_path(cls, filename, password):
		fs = cls(filename, password)
		s = run_gpg(["-d", "--no-mdc-warning", filename], password)
		try:
			fs._from_json(s.decode("utf-8"))
		except KeyError:
			raise CorruptFS("data/metadata not found")
		return fs

	def recv_response(self):
		buf = ''
		while len(buf) == 0 or buf[-1] != '\n':
			t = self.socket.recv(SOCKBUF_SIZE)
			if len(t) == 0:
				raise Exception("invalid response from server")
			else:
				buf += t
		parts = buf[:-1].split(' ', 1)
		if len(parts) == 1:
			parts += [None]
		return parts

	@classmethod
	def from_server(cls, socket, filename):
		fs = cls(filename, None)
		fs.socket = socket
		fs.socket.sendall("%s %s\n" % (READ_REQ, base64.b64encode(filename)))
		resp, data = fs.recv_response()
		if resp == "OK":
			fs._from_json(base64.b64decode(data).decode("utf-8"))
			return fs
		else:
			raise Exception(data)

	def output_secret(self, s, force):
		if self.pipe_to is None:
			check_tty_print_interlock(force)
			print(s, end='\n' if sys.stdout.isatty() else '')
		else:
			proc = subprocess.Popen(self.pipe_to, shell=True, stdin=subprocess.PIPE)
			proc.communicate(s.encode("utf-8"))
			status = proc.wait()
			if status != 0:
				errprint("['%s' exited with status %d]" % (self.pipe_to, status))
			else:
				# might stderr be more appropriate here?
				print("[sent output to '%s']" % self.pipe_to)

	def _write_out(self):
		self.metadata["last_modification_time"] = time.time()
		self.metadata["last_modification_tzname"] = time.tzname[time.daylight]
		self.metadata["last_modification_host"] = get_hostname()
		jemf_buf = self._to_json().encode("utf-8") + b'\n'

		if self.socket is not None:
			assert self.password is None
			self.socket.sendall("%s %s %s\n" % (WRITE_REQ,
							    base64.b64encode(self.filename),
							    base64.b64encode(jemf_buf)))
			resp, data = self.recv_response()
			if resp == "OK":
				return
			else:
				raise Exception(data)

		# If filename is a symlink, do the new file write & rename in
		# the directory in which the pointed-to file resides
		filename = os.path.realpath(self.filename)

		dirpath = os.path.dirname(filename)
		tmpfd, tmppath = tempfile.mkstemp(prefix=os.path.basename(filename), dir=dirpath)

		output = run_gpg(["-c", "--yes", "-o", tmppath], self.password, jemf_buf)
		if output != b'':
			os.unlink(tmppath)
			internal_error("Unexpected output from gpg: %s\n" % output)

		os.fsync(tmpfd)
		os.close(tmpfd)

		os.rename(tmppath, filename)

		# fsync the containing directory to persist the rename
		dirfd = os.open(dirpath, os.O_RDONLY)
		os.fsync(dirfd)
		os.close(dirfd)

	def _lookup_comps(self, root, comps, noexc=False):
		fsdir = root
		trail = os.sep
		for c in comps:
			try:
				fsdir = fsdir[c]
			except KeyError:
				if noexc:
					return None
				else:
					error("'%s' does not exist in '%s'" % (c, trail))
			trail = os.path.join(trail, c)
		return fsdir

	def lookup_path(self, path, noexc=False):
		if len(path) > 0 and path[0] == os.sep:
			root = self.data
		else:
			root = self.cwd
		return self._lookup_comps(root, path_components(path), noexc=noexc)

	def lookup_for_edit(self, path, should_exist):
		"""Lookup the parent of 'path', returning a tuple of it and the last
		component of 'path'."""
		root = self.data if path[0] == os.sep else self.cwd
		comps = path_components(path)

		if len(comps) > 0:
			parent = self._lookup_comps(root, comps[:-1])
			tgtcomp = comps[-1]
		else:
			parent = root
			tgtcomp = os.path.curdir

		if not isdir(parent):
			error("'%s' is not a directory" % os.path.join(*parentcomps))

		if should_exist is not None:
			if not should_exist and tgtcomp in parent:
				error("'%s' already exists" % path)
			elif should_exist and tgtcomp not in parent:
				error("'%s' does not exist" % path)

		return (parent, tgtcomp)

	commands = []

	# parameterized meta-decorator...deep magic
	def _bind_args(**bound_kwargs):
		def new_decorator(orig_decorator):
			@functools.wraps(orig_decorator)
			def new_cmd_method(orig_cmd_method, *args, **kwargs):
				kwargs.update(bound_kwargs)
				return orig_decorator(orig_cmd_method, *args, **kwargs)
			return new_cmd_method
		return new_decorator

	# inner decorator for methods implementing commands
	@_bind_args(cmdlist=commands)
	def _command(fn, cmdlist, **kwargs):
		method = lambda f: types.MethodType(f, fn)

		@method
		def add_to(self, subparsers):
			self.parser = subparsers.add_parser(self.name, description=self.desc,
							    help=self.desc, add_help=False, **self.parser_kwargs)
			self.parser.set_defaults(action=self)
			for a in self.cmd_args:
				self.parser.add_argument(*a[0], **a[1])

			# Custom help argument that doesn't unconditionally exit
			# (so that we can avoid exiting when --help is passed to
			# a command in shell mode).
			self.parser.add_argument('-h', "--help", action=JemfHelpAction, default=argparse.SUPPRESS,
						 nargs=0, help="show this help message")

		@method
		def create_parser(self):
			tmp = argparse.ArgumentParser().add_subparsers()
			self.add_to(tmp)

		# supply default command attributes
		attrs = dict(cmd_args = [],
			     parser_kwargs = {},
			     batch_only = False,
			     shell_only = False,
			     name = fn.__name__,
			     desc = fn.__doc__,
			     add_to = add_to,
			     create_parser = create_parser)

		# defaults overridable via @reader()/@writer kwargs
		attrs.update(kwargs)

		for a, v in attrs.items():
			setattr(fn, a, v)

		cmdlist.append(fn)

		return fn

	# decorator for commands that modify the FS
	@_bind_args(inner_decorator=_command)
	def writer(cmd_args, inner_decorator, **kwargs):
		def wr_dec(fn):
			@functools.wraps(fn)
			def new_fn(self, *args, **kwargs):
				fn(self, *args, **kwargs)
				self._write_out()
			return inner_decorator(new_fn, cmd_args=cmd_args, **kwargs)
		return wr_dec

	# decorator for read-only commands
	@_bind_args(inner_decorator=_command)
	def reader(cmd_args, inner_decorator, **kwargs):
		def rd_dec(fn):
			return inner_decorator(fn, cmd_args=cmd_args, **kwargs)
		return rd_dec

	# some common flags
	generate_arg = (("-g", "--generate"), dict(metavar="CONSTRAINTS", type=str,
						   help="auto-generate entry data"))
	force_print_arg = (("-f", "--force"), dict(help="disable anti-tty-print interlock",
						   action="store_true"))
	force_overwrite_arg = (("-f", "--force"), dict(help="overwrite an existing file",
						       action="store_true"))

	@writer([force_overwrite_arg], batch_only=True)
	def mkfs(self, args):
		"""initialize a new jemf FS"""
		self.data = Directory(None)
		self.metadata = {}
		self.extra_sections = {}

	@writer([])
	def chpass(self, args):
		"""change the master password of a jemf FS"""

		if self.password is None:
			error("can't change password via background-process socket")

		# Only verify that the user knows the current password
		# in shell mode (in batch mode they'll have just
		# entered it).
		if self.shell_mode:
			if getpass("Enter current password for %s: " % self.filename) != self.password:
				error("password incorrect")

		newpass = confirmed_getpass("new password for %s" % self.filename)
		self.password = newpass

	@reader([mk_path_arg("directory to change to (default: root)", opt=True)],
		shell_only=True)
	def cd(self, args):
		"""change working directory"""
		if args.path is not None:
			obj = self.lookup_path(args.path)
			if not isinstance(obj, Directory):
				error("'%s' is not a directory" % args.path)
		else:
			obj = self.data
		self.cwd = obj

	@reader([], shell_only=True)
	def pwd(self, args):
		"""print working directory"""
		# dumb brute force...could introduce some extra
		# machinery to make this more efficient.
		def get_dirname(obj):
			parent = obj[os.path.pardir]
			if parent is obj:
				return os.sep
			for k, v in parent.items():
				if v is obj:
					return os.path.join(get_dirname(parent), k)
			return '???'
		print(get_dirname(self.cwd))

	@writer([mk_path_arg("the directory to create")])
	def mkdir(self, args):
		"""create a new directory"""
		parent, newname = self.lookup_for_edit(args.path, should_exist=False)
		d = Directory(parent)
		d.touch()
		parent[newname] = d

	@writer([generate_arg, mk_path_arg("the file to create")],
		parser_kwargs=dict(epilog=gen_constraints_desc,
				   formatter_class=argparse.RawDescriptionHelpFormatter))
	def create(self, args):
		"""create a new file"""
		parent, newname = self.lookup_for_edit(args.path, should_exist=False)
		if args.generate is None:
			parent[newname] = File(confirmed_getpass("data for %s" % args.path))
		else:
			parent[newname] = File(generate_data(args.generate))

	@writer([generate_arg, mk_path_arg("the file to edit")],
		parser_kwargs=dict(epilog=gen_constraints_desc,
				   formatter_class=argparse.RawDescriptionHelpFormatter))
	def edit(self, args):
		"""edit an existing file"""
		parent, tgtname = self.lookup_for_edit(args.path, should_exist=True)
		if not isfile(parent[tgtname]):
			error("'%s' is not a file" % args.path)

		if args.generate is None:
			parent[tgtname] = File(confirmed_getpass("new data for %s" % args.path))
		else:
			parent[tgtname] = File(generate_data(args.generate))

	@writer([force_overwrite_arg,
		 (("frompath",), dict(metavar="FROM", help="current path/name")),
		 (("topath",), dict(metavar="TO", help="new path/name"))])
	def mv(self, args):
		"""move/rename a file or directory"""
		curparent, objname = self.lookup_for_edit(args.frompath, should_exist=True)
		obj = curparent[objname]
		topath = args.topath
		newparent, newobjname = self.lookup_for_edit(topath, should_exist=None)
		if newobjname in newparent and isdir(newparent[newobjname]):
			newparent = newparent[newobjname]
			newobjname = objname
			topath = os.path.join(args.topath, objname)

		p = newparent
		while p[os.path.pardir] is not p:
			if p is obj:
				error("can't move '%s' inside itself" % args.frompath)
			p = p[os.path.pardir]

		if newobjname in newparent:
			existing = newparent[newobjname]
			if not args.force:
				error("'%s' exists (user '-f' to overwrite)" % topath)
			elif isdir(existing) and len(existing) > 0:
				error("'%s' is not empty" % topath)

		newparent[newobjname] = obj
		del curparent[objname]

	@writer([(("-r", "--recursive"), dict(help="recursively delete directory contents",
					      action="store_true")),
		 mk_path_arg("the file or directory to delete")])
	def rm(self, args):
		"""delete a file or directory"""
		parent, tgtname = self.lookup_for_edit(args.path, should_exist=True)
		obj = parent[tgtname]
		if obj is self.data:
			error("can't delete '%s'" % os.sep)
		elif isdir(obj) and len(obj.dentries) > 0 and not args.recursive:
			error("'%s' is not empty" % args.path)
		else:
			del parent[tgtname]

	@reader([mk_path_arg("the file to print"), force_print_arg])
	def cat(self, args):
		"""print a file to stdout"""
		item = self.lookup_path(args.path)
		if isdir(item):
			error("'%s' is a directory" % args.path)
		self.output_secret(item.data, args.force)

	@reader([mk_path_arg("starting directory (default: .)", opt=True)])
	def find(self, args):
		"""recursively list files and directories"""
		if args.path is None:
			paths = recursive_list(self.cwd, os.path.curdir)
		else:
			paths = recursive_list(self.lookup_path(args.path), args.path)
		sys.stdout.write('\n'.join(paths) + '\n')

	@reader([mk_path_arg("file or directory to list (default: .)", opt=True),
		 (("-l", "--long"), dict(help="use long format", action="store_true")),
		 (("-d", "--directory"), dict(help="list directories themselves, not their contents",
					      action="store_true"))])
	def ls(self, args):
		"""list files and directories"""
		if args.path is not None:
			path = args.path
			obj = self.lookup_path(path)
		else:
			path = os.path.curdir
			obj = self.cwd

		def lsfmt(objs):
			if len(objs) == 0:
				return ''
			# longest mhost length
			hostlen = max(len(o[1].metadata.mhost) if o[1].metadata else 0 for o in objs)
			nometa = "????-??-?? ??:??:?? ???"
			timefmt = "%Y-%m-%d %H:%M:%S"
			def fmtitem(item):
				name, obj = item
				if args.long:
					if obj.metadata:
						m = time.strftime(timefmt, time.localtime(obj.metadata.mtime))
						m += " %s  %*s  " % (obj.metadata.mtzname, hostlen, obj.metadata.mhost)
					else:
						m = "%s  %*s  " % (nometa, hostlen, "?")
				else:
					m = ""
				return "%s%s%s" % (m, name, os.path.sep if isdir(obj) and name[-1] != os.path.sep else "")
			return '\n'.join(fmtitem(i) for i in objs) + '\n'

		objs = [(path, obj)] if isfile(obj) or args.directory else sorted(obj.items())
		sys.stdout.write(lsfmt(objs))

	if debugmode:
		@reader([(("-m", "--metadata"), dict(action="store_const", dest="kind",
						     const="metadata", help="dump only metadata")),
			 (("-d", "--data"), dict(action="store_const", dest="kind",
						 const="data", help="dump only data")),
			 force_print_arg])
		def dump(self, args):
			"""dump plaintext JSON"""
			if args.kind == "data":
				s = pretty_json_dump(self.data)
			elif args.kind == "metadata":
				s = pretty_json_dump(self.metadata)
			else:
				s = self._to_json()
			self.output_secret(s, args.force)

	def _menu_select(self, items):
		argv = ["dmenu", "-i", "-b", "-l", "20", "-p", self.filename,
			"-nb", "#600", "-nf", "white", "-sb", "white", "-sf", "black"]
		try:
			proc = subprocess.Popen(argv, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
		except OSError as ose:
			if ose.errno == errno.ENOENT:
				raise UserError("Error attempting to execute %s: %s"
						% (argv[0], ose.strerror))
			else:
				raise

		out, _ = proc.communicate('\n'.join(items) + '\n')
		retval = proc.wait()
		if retval != 0 or out == '':
			return None
		else:
			assert out[-1] == '\n'
			return out[:-1]

	@reader([force_print_arg])
	def menu(self, args):
		"""print a file selected from a menu (requires `dmenu')"""
		paths = recursive_list(self.cwd, os.path.curdir, fileonly=True)
		selected = self._menu_select(sorted(paths))
		if selected is None:
			print("(Nothing selected.)", file=sys.stderr)
			exit(1)
		item = self.lookup_path(selected)
		assert isfile(item)
		self.output_secret(item.data, args.force)

	@reader([(("-p", "--pipe-to"), dict(metavar="CMD", type=str, default=None,
					    help="shell command to pipe output to for commands"
					    " that print file data"))], batch_only=True)
	def shell(self, args):
		"""start an interactive jemf shell"""
		sh = JemfShell(self, args)

		self.shell_mode = True

		for cmd in self.commands:
			if cmd.batch_only:
				continue

			# get the "jemf" prefix out of the help message
			cmd.parser.prog = cmd.name

			# hack around argparse's inability to report
			# an error without exiting...
			cmd.parser.error = mk_raise_usage_error(cmd.parser.format_usage())

			sh._add_cmd_handler(cmd)

		# saving and restoring self.pipe_to here is kind of
		# overkill, but aesthetically slightly preferable to
		# clobbering it completely.
		orig_pipe_to = self.pipe_to
		self.pipe_to = args.pipe_to
		while True:
			try:
				sh.cmdloop()
			except KeyboardInterrupt:
				sys.stdout.write("^C\n")
				continue
			else:
				break
		self.pipe_to = orig_pipe_to

		# likewise, this shouldn't really be necessary, but
		# just for sake of cleanliness...
		self.shell_mode = False

def open_jemf_fs(args):
	# First try to open via a persistent server process
	sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	try:
		sock.connect(get_sockpath(args.fsfile))
		return Jemf.from_server(sock, args.fsfile)
	except:
		sock.close()

	if not os.path.exists(args.fsfile):
		error("'%s' does not exist" % args.fsfile)
	password = getpass("Enter password for %s: " % args.fsfile)
	return Jemf.load_from_path(args.fsfile, password)

def new_jemf_fs(args):
	if os.path.exists(args.fsfile) and not args.force:
		error("%s exists (use -f to force reinitialization)" % args.fsfile)

	# It'd be nice if python had a do-while loop...
	password = ""
	while password == "":
		password = confirmed_getpass("password for new jemf FS (%s)" % args.fsfile)
		if password == "":
			errprint("Empty password not allowed.")

	return Jemf(args.fsfile, password)

def get_sockdir():
	uid = os.getuid()
	return "/tmp/.jemf-%d" % uid

def get_sockpath(fsfile):
	return get_sockdir() + "/" + hashlib.sha1(fsfile).hexdigest()

def get_socket(fsfile):
	sockdir = get_sockdir()
	try:
		os.mkdir(sockdir, 0o700)
	except OSError as e:
		if e.errno == errno.EEXIST:
			os.chmod(sockdir, 0o700)
		else:
			raise
	sockpath = get_sockpath(fsfile)
	sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	sock.bind(sockpath)
	os.chmod(sockpath, 0o600)

	return sock

# Arbitrary data fields are sent base64-encoded so as to guarantee
# absence of spaces and LFs (which are significant).
#
# Request: 'READ' SP base64(fsfile-path) LF
# Response:
#   'OK' SP base64(json) LF
#   'ERROR' SP error-message LF
#
# Request: 'WRITE' SP base64(fsfile-path) SP base64(json) LF
# Response:
#   'OK' LF
#   'ERROR' SP error-message LF
#
# Request: 'EXIT' LF
# Response: 'OK' LF

EXIT_REQ = "EXIT"
READ_REQ = "READ"
WRITE_REQ = "WRITE"

def err_resp(s):
	return "ERROR %s\n" % s

def serve_request(line, fs, client):
	fields = line.split(' ')
	req = fields[0]
	if req == EXIT_REQ:
		os.kill(os.getppid(), signal.SIGTERM)
		client.sendall("OK\n")
		os._exit(0)
	elif req == READ_REQ:
		if len(fields) != 2:
			client.sendall(err_resp("wrong number of arguments to READ"))
		else:
			path = base64.b64decode(fields[1])
			if path == fs.filename:
				client.sendall("OK %s\n" % base64.b64encode(fs._to_json()))
			else:
				client.sendall(err_resp("wrong filename"))
	elif req == WRITE_REQ:
		if len(fields) != 3:
			client.sendall(err_resp("wrong number of arguments to WRITE"))
		else:
			path, data = map(base64.b64decode, fields[1:])
			if path == fs.filename:
				try:
					fs._from_json(data)
					fs._write_out()
					client.sendall("OK\n")
				except:
					# TODO: better error message?
					client.sendall("ERROR update failed\n")
			else:
				client.sendall(err_resp("wrong filename"))
	else:
		client.sendall(err_resp("invalid request"))

def serve_client(client, fs):
	buf = b''
	while True:
		t = client.recv(SOCKBUF_SIZE)
		if len(t) == 0:
			break
		else:
			buf += t
			if '\n' in t:
				lines = buf.split('\n')
				buf = lines[-1]
				for line in lines[:-1]:
					serve_request(line, fs, client)

def serve_fs(fs, timeout):
	srvsock = get_socket(fs.filename)
	pid = os.fork()
	if pid == 0:
		os.close(sys.stdin.fileno())
		os.close(sys.stdout.fileno())
		os.close(sys.stderr.fileno())

		srvsock.listen(8)

		def exit_handler(signum, frame):
			try:
				os.unlink(get_sockpath(fs.filename))
			except:
				pass
			exit(0)

		def chld_handler(signum, frame):
			os.wait()

		signal.signal(signal.SIGTERM, exit_handler)
		signal.signal(signal.SIGALRM, exit_handler)
		signal.signal(signal.SIGCHLD, chld_handler)

		try:
			while True:
				signal.alarm(timeout)
				try:
					client, _ = srvsock.accept()
				except socket.error as err:
					if err.errno == errno.EINTR:
						continue
					else:
						raise
				pid = os.fork()
				if pid == 0:
					try:
						serve_client(client, fs)
						os._exit(0)
					except:
						os._exit(1)
				client.close()
		except:
			try:
				os.unlink(get_sockpath(fs.filename))
			except:
				pass
			exit(1)

def main():
	mainparser = argparse.ArgumentParser(description="a jeneric (?), encrypted mini-filesystem",
					     epilog="FS file can also be specified with the environment"
					     " variable JEMF_FSFILE")

	mainparser.add_argument("-f", "--fsfile", type=str, help="jemf FS file to use")
	mainparser.add_argument("-X", "--gui", action="store_true",
				help="Use GUI sub-programs for password input and status output"
				     " ([gnome-]ssh-askpass and zenity/[g]xmessage)")
	mainparser.add_argument("-P", "--persist", type=int, help="fork a background server process for "
				"passphrase-less operation of subsequent invocations within NSEC seconds",
				metavar="NSEC", default=0)

	subparsers = mainparser.add_subparsers(metavar="COMMAND", title=None)
	subparsers.required = True

	# sorted for ordering in --help output
	for cmd in sorted(Jemf.commands, key=lambda c: c.name):
		if not cmd.shell_only:
			cmd.add_to(subparsers)
		else:
			cmd.create_parser()

	try:
		args = mainparser.parse_args()
	except HelpFlagPassed:
		exit(0)

	if args.gui:
		global getpass, errprint
		getpass = getpass_gui
		errprint = errprint_gui

	if args.fsfile is None:
		for p in [os.getenv("JEMF_FSFILE"), find_fs()]:
			if p is not None:
				args.fsfile = p
				break

	# matching by name here is kind of ugly...
	doing_mkfs = args.action.name == "mkfs"

	# Early check for things that might print secrets to stdout
	# (to avoid the annoyance of entering your passphrase only to
	# then find out that you forgot a flag and now have to do it
	# over again).
	if Jemf.force_print_arg in args.action.cmd_args:
		check_tty_print_interlock(args.force)

	if args.fsfile is None:
		if doing_mkfs:
			args.fsfile = default_fspaths[0]
		else:
			error("no jemf FS found or specified")

	ctor = new_jemf_fs if doing_mkfs else open_jemf_fs
	try:
		jfs = ctor(args)
		args.action(jfs, args)
	except KeyboardInterrupt:
		sys.stdout.write("^C\n")
		exit(1)

	if args.persist > 0 and jfs.socket is None:
		serve_fs(jfs, args.persist)

if __name__ == "__main__":
	try:
		main()
	except subprocess.CalledProcessError as cpe:
		cmdname = cpe.cmd[0] if type(cpe.cmd) is list else cpe.cmd.split()[0]
		print("[%s exited with status %d]" % (cmdname, cpe.returncode), file=sys.stderr)
		exit(1)
	except UserError as ue:
		if ue.args[0]:
			errprint(ue.args[0])
		exit(1)
